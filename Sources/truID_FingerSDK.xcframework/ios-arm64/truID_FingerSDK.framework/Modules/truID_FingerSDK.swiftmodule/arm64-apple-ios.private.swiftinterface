// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name truID_FingerSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import Alamofire
import CoreGraphics
import CoreLocation
import Foundation
import MapKit
import Swift
import SwiftUI
import T5AirSnapFramework
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
@_exported import truID_FingerSDK
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SplashScreen : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var fingerprintCaptureDelegate: truID_FingerSDK.FingerprintCaptureProtocol?
  @_Concurrency.MainActor(unsafe) public var API_URL: Swift.String?
  @_Concurrency.MainActor(unsafe) public var session: Swift.Int?
  @_Concurrency.MainActor(unsafe) public var token: Swift.String?
  @_Concurrency.MainActor(unsafe) public var chosenColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var locationState: truID_FingerSDK.GlobalState?
  @_Concurrency.MainActor(unsafe) required public init(token: Swift.String, session: Swift.Int, API_URL: Swift.String?, chosenColor: UIKit.UIColor? = nil, fingerprintCaptureDelegate: truID_FingerSDK.FingerprintCaptureProtocol? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GlobalSettings {
  public static var chosenColor: UIKit.UIColor
  public static var API_URL: Swift.String
  @objc deinit
}
public enum FingerprintPositionCode {
  case left_4
  case right_4
  case left_thumb
  case right_thumb
  public static func == (a: truID_FingerSDK.FingerprintPositionCode, b: truID_FingerSDK.FingerprintPositionCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SessionResult {
  public var sessionID: Swift.Int?
  public var error: Swift.String?
  public var status: Swift.Bool
  public init(sessionID: Swift.Int? = nil, error: Swift.String? = nil, status: Swift.Bool)
  @objc deinit
}
public protocol FingerprintCaptureProtocol {
  func callback(result: truID_FingerSDK.SessionResult?)
  func onError(message: Swift.String)
}
public class FingerCaptureDelegate {
  public func callback(result: truID_FingerSDK.SessionResult?)
  public func onError(message: Swift.String)
  public init(resultCallback: @escaping (truID_FingerSDK.SessionResult) -> Swift.Void, errorCallback: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
public struct FingerprintCaptureStoryboardViewController : SwiftUI.UIViewControllerRepresentable, truID_FingerSDK.FingerprintCaptureProtocol {
  public func callback(result: truID_FingerSDK.SessionResult?)
  public func onError(message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: truID_FingerSDK.FingerprintCaptureStoryboardViewController.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: truID_FingerSDK.FingerprintCaptureStoryboardViewController.Context)
  public init(token: Swift.String, resultCallback: @escaping (truID_FingerSDK.SessionResult) -> Swift.Void, errorCallback: @escaping (Swift.String) -> Swift.Void)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
public var configuration: [Swift.String : Swift.Bool]
public struct StepConfig : Swift.Codable {
  public let id_to_selfie_matching: Swift.Bool?
  public let extract_data: Swift.Bool?
  public let verisys_verification: Swift.Bool?
  public let document_authenticity: Swift.Bool?
  public let document_backside_capture: Swift.Bool?
  public let finger_selection: Swift.Bool?
  public let passive_face_liveness: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Config : Swift.Codable {
  public let path: Swift.String?
  public let type: Swift.String
  public let required: Swift.Bool?
  public let step_config: truID_FingerSDK.StepConfig?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Configuration : Swift.Codable {
  public let config: [truID_FingerSDK.Config]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Session : Swift.Codable, Swift.Identifiable {
  public let id: Swift.Int
  public let status: Swift.String?
  public let configuration: truID_FingerSDK.Configuration
  public typealias ID = Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CreateSessionRequest : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public func getConfigurationJSON() -> Swift.String
@objc @_inheritsConvenienceInitializers final public class GlobalState : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc final public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc override dynamic public init()
  @objc deinit
}
extension truID_FingerSDK.FingerprintPositionCode : Swift.Equatable {}
extension truID_FingerSDK.FingerprintPositionCode : Swift.Hashable {}
